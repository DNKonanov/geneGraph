import argparse
from collections import OrderedDict
from create_db import Genome, Contig, NodeOG, Complexity, Edge, NodeKey
from peewee import SqliteDatabase

import manage_db
import reverse
from find_context import find_context

parser = argparse.ArgumentParser()
parser.add_argument('-i', '--input_file', default='no', type=str, help='input_file, generated by Orthofinder')
parser.add_argument('-o', '--out_file', default='paths', type=str, help='output file prefix (default paths)')
args = parser.parse_args()


graph = OrderedDict()
length_table = OrderedDict()
coord_table = OrderedDict()


for line in open(args.input_file, 'r'):

	OG, string = line.split(': ')[0], line.split(': ')[1][:-1]


	stamms = string.split(' ')
	for stamm in stamms:
		name = stamm.split('|')[0]
		start_coord = int(stamm.split('|')[-2])
		end_coord = int(stamm.split('|')[-1])
		coord = int(stamm.split('|')[1])
		description = stamm.split('|')[2]
		contig_name = stamm.split('|')[3]

		if name not in graph:
			graph[name] = {contig_name:[(start_coord, OG)]}
			coord_table[name] = {}
			length_table[name] = {}

		elif contig_name not in graph[name]:
			graph[name][contig_name] = [(start_coord, OG)]

		else:
			graph[name][contig_name].append((start_coord,OG))
		
		coord_table[name].update([(OG, [start_coord, end_coord, description])])
		length_table[name].update([(OG, end_coord - start_coord)])


for name in graph:
	 for contig in graph[name]:
		 graph[name][contig].sort()
		 graph[name][contig] = [graph[name][contig][i][1] for i in range(len(graph[name][contig]))]

out_context = open(args.out_file + '_context.txt', 'a+')
og_context = find_context(graph)
for og in og_context:
	out_context.write(og + '\t' + str(og_context[og]) + '\n')


out = open(args.out_file + '.sif', 'a+')
out_freq = open(args.out_file + '_freq.sif', 'a+')


coord_list = {}
for name in graph:
	G = set([])
	S = set([])
	for contig in graph[name]:
		for gene in graph[name][contig]:
			if gene in S:
				G.add(gene)
				continue

			S.add(gene)
	coord_list[name] = {}
	for contig in graph[name]:
		coord_list[name][contig] = []
		fixed_contig = []
		for gene in graph[name][contig]:
			if gene in G:
				continue
			fixed_contig.append(gene)
			coord_list[name][contig].append([coord_table[name][gene][0], coord_table[name][gene][1]])

		graph[name][contig] = fixed_contig.copy()

graph, reversed_chains = reverse.reverse(graph, length_table)

for stamm in graph:
	for contig in graph[stamm]:
		if contig in reversed_chains[stamm]:
			print(contig)
			coord_list[stamm][contig].reverse()


db = SqliteDatabase(args.out_file + '.db')


for _class in [Genome, Contig, NodeOG, Complexity, Edge, NodeKey]:
	_class._meta.database = db

db.create_tables([Genome, Contig, NodeOG, Complexity, Edge, NodeKey])

nodes_set = set([])
for genome in graph:
	for contig in graph[genome]:
		c = graph[genome][contig]

		nodes_set.update(set(c))

nodes_codes_query = []
nodes_codes = {}
node_id = 0
for node in nodes_set:

	nodes_codes_query.append({'node_id': node_id, 'node_name': node})
	nodes_codes[node] = node_id
	node_id += 1

NodeKey.insert_many(nodes_codes_query).execute()



for name in graph:

	pw_query = []
	print(name)
	print('---')
	genome_pw = Genome.create(genome_code=name, genome_name='none')
	
	for contig in graph[name]:
		if len(graph[name][contig]) < 2:
			continue
			
		contig_pw = Contig.create(contig_code=contig, genome=genome_pw)
		print(contig)

		for i in range(len(graph[name][contig])):
			gene = graph[name][contig][i]
			pw_query.append({'node_name': gene, 'contig': contig_pw, 'description': coord_table[name][gene][2], 'start_coord':coord_list[name][contig][i][0], 'end_coord': coord_list[name][contig][i][1]})
	

			if i == len(graph[name][contig]) - 1:
				continue
			line = graph[name][contig][i] + ' ' + graph[name][contig][i + 1] + ' ' + name + ' ' + contig + '\n'
			out.write(line)
			
	NodeOG.insert_many(pw_query).execute()
	

genomes_codes = {g.genome_code: g. genome_id for g in Genome.select()}

freq = {}
for genome in graph:
	for contig in graph[genome]:
		c = graph[genome][contig]

		for i in range(len(c) - 1):
			if (c[i], c[i+1]) not in freq:
				freq[(c[i], c[i+1])] = [genome]

			else:
				freq[(c[i], c[i+1])].append(genome)

edge_id = 0
edges_query = []


for edge in freq:
	edges_query.append({'source': nodes_codes[edge[0]], 'target': nodes_codes[edge[1]], 'frequency': len(freq[edge]), 'genomes': '\n'.join(freq[edge])})
	edge_id += 1

Edge.insert_many(edges_query).execute()